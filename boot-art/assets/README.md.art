# boot-art Ash Ra Template Boot Task

{%
(require 'clojure.string)
(require 'vivid.art)

(def to-phase-values (->> vivid.art/render-phases
                          (map #(format "`%s`" (name %)))
                          (clojure.string/join ", ")))
%}

[![License](https://img.shields.io/badge/license-Apache%202-blue.svg?style=flat-square)](LICENSE.txt)
[![Current version](https://img.shields.io/clojars/v/vivid/boot-art.svg?color=blue&style=flat-square)](https://clojars.org/vivid/boot-art)

`boot-art` composes easily into your existing [Boot](https://github.com/boot-clj/boot) infrastructure for rendering [Ash Ra Template](https://github.com/vivid-inc/ash-ra-template) `.art` templates.



## Quick Start
{% ; Quick Start introduces a least-friction sample that intrigues the reader to try it out themselves. %}

```sh
$ cat oracle.art

<% (defn mult [multiplicands] (apply * multiplicands)) %>
Wait, I see it! Your destiny lies deep within the number <%= (mult mysterious-primes) %>.

$ boot -d vivid/boot-art art --bindings "'{mysterious-primes [7 191]}" \
                             --files oracle.art \
                             --output-dir .
```
`boot-art` will render the output file `oracle` into the current directory.

Re-writing the above into a `build.boot`:

```clojure
(set-env! :dependencies '[[vivid/boot-art "{%=vivid-art-version%}"]]
          :resource-paths #{"templates"})    ; NOTE: Move oracle.art into this dir

(require '[vivid.boot-art :refer [art]])

(deftask rndr []
         (comp (art :bindings '{mysterious-primes [7 191]})
               (target)))
```

You can render ART templates using `boot` at the CLI anywhere you desire:
```sh
$ boot -d vivid/boot-art art --help
```



## Synopsis

`boot-art` can be used with Boot `build.boot` and at the CLI.

Templates occur as `.art` template files in Boot's fileset, or optionally by
`:file` as one or more paths `.art` template files and/or directory trees thereof.
The `art` Boot task scans those paths for all ART template files with the `.art`
filename extension.

Templates are rendered and written with a task like `(target)`, or optionally
diverted to the output directory `:output-dir`, stripped of their `.art`
filename extensions, overwriting any existing files with the same paths.
`output-dir` and sub-paths therein are created as necessary.



#### Options

| `build.boot` | CLI argument | Parameters | Default | Explanation |
| --- | --- | --- | --- | --- |
| `:bindings` | `--bindings` | VAL | | Bindings made available to templates for symbol resolution |
| `:delimiters` | `--delimiters` | VAL | `{%=vivid.art/default-delimiters-name%}` | Template delimiters |
| `:dependencies` | `--dependencies` | VAL | | Clojure deps map providing libs within the template evaluation environment. Deps maps are merged into this one. Supply your own Clojure dep to override the current version. |
| | `-h`, `--help` | | | Displays lovely help and then exits |
| `:output-dir` | `--output-dir` | DIR | | Divert rendered file output to DIR |
| `:templates` | `--templates` | FILES | | Render these ART files and directory trees thereof, instead of Boot's fileset |
| `:to-phase` | `--to-phase` | One of: {%= to-phase-values %} | `{%= (name vivid.art/default-to-phase) %}` | Stop the render dataflow on each template at an earlier phase |

The same argument can be given multiple times; the effect is additive, merging, or overriding
in nature depending on the option but argument processing order is not guaranteed.
This might be important to you in the event of collisions.

Depending on what types of values a particular option accepts and whether `boot-art` was invoked as a Boot task in Clojure or from the CLI,
ART attempts to interpret argument values in this order of precedence:
1. As a map.
1. As the (un-)qualified name of a var.
1. As a path to an EDN file.
1. As an EDN literal.



## Cookbook

`art/test-resources` contains sample Boot projects that parallel the automated test suite, including all examples shown here.

#### Override version of Clojure dependency

#### Custom bindings, delims, deps

#### Re-render with watch

#### Specify files and output dir







#### CLI: Render ART templates with bindings and custom delimiters
```bash
$ cat oracle.art

<% (defn mult [multiplicands] (apply * multiplicands)) %>
Wait, I see it! Your destiny lies deep within the number <%= (mult mysterious-primes) %>.

$ boot art --bindings "'{mysterious-primes [7 191]}" \
           --files oracle.art
```

Discussion:
Command-line arguments presented by Boot to the `boot-art` task are interpreted as code.
You can prevent evaluation of undefined symbols by quoting them with a single quote `'`, for example as above.


#### `build.boot`: Specifying ART template files and/or the output directory
```clojure
(import '(java.io File))

(deftask rndr []
         (art :templates  #{"source/index.html.art" "templates"}
              :output-dir (File. "out")))
```
Discussion:
If `:templates` is specified, `art` will use those files instead of searching Boot's fileset.
Providing an `:output-dir` will cause templates to be written there as well as to Boot's `(target)` (if any).


#### `build.boot`: Re-render templates whenever their source files change
```clojure
(set-env! :resource-paths #{"templates"})

(deftask dev []
         (comp (watch)
               (art)
               (target)))
```



## License

Â© Copyright Vivid Inc.
[Apache License 2.0](LICENSE.txt) licensed.
