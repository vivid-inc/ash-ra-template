# boot-art Ash Ra Template Boot Task

<%
(require 'clojure.string)
(require 'vivid.art)
(use '[vivid.boot-art])

(def to-phase-values (->> vivid.art/render-phases
                          (map #(format "`%s`" (name %)))
                          (clojure.string/join ", ")))
%>

[![License](https://img.shields.io/badge/license-Apache%202-blue.svg?style=flat-square)](LICENSE.txt)
[![Current version](https://img.shields.io/clojars/v/vivid/boot-art.svg?color=blue&style=flat-square)](https://clojars.org/vivid/boot-art)

`boot-art` composes easily into your existing [Boot](https://github.com/boot-clj/boot) infrastructure for rendering [Ash Ra Template](https://github.com/vivid-inc/ash-ra-template) `.art` templates.



## Quick Start
<% ; Quick Start introduces a least-friction sample that intrigues the reader to try it out themselves. %>

Provided paths to files and/or directory trees in `:templates`,
the `art` Boot task finds all ART template files whose names
bear the `.art` filename extension.
Those templates are rendered and written under the output directory
`:output-dir` preserving sub-paths and stripped of the `.art` extension.

In your `build.boot`:

```clojure
(set-env! :dependencies '[[vivid/boot-art "<%=vivid-art-version%>"]]
          :source-paths #{"templates"})

(require '[vivid.boot-art :refer [art]])

(deftask my-pipeline []
         (comp ...
               (art :bindings     VAL
                    :delimiters   VAL
                    :dependencies VAL)
               ...
               (target)))
```

## Options

| Keyword | CLI argument | Parameters | Default | Explanation |
| --- | --- | --- | --- | --- |
| :bindings | `--bindings` | VAL | | Bindings made available to templates for symbol resolution |
| :delimiters | `--delimiters` | VAL | `erb` | Template delimiters |
| :dependencies | `--dependencies` | VAL | | Clojure deps map providing libs within the template evaluation environment. Deps maps are merged into this one. Supply your own Clojure dep to override the current version. |
| | `-h`, `--help` | | | Displays lovely help and then exits |
| :output-dir | `--output-dir` | DIR | `.` | Write rendered files to DIR |
| :to-phase | `--to-phase` | One of: <%= to-phase-values %> | | Stop the render dataflow on each template at an earlier phase |



## Cookbook

`art/test-resources` contains sample Boot projects that parallel the automated test suite.


#### CLI: Render ART templates with bindings and custom delimiters
```bash
$ cat oracle.art

{% (defn mult [multiplicands] (apply * multiplicands)) %}
Wait, I see it! Your destiny lies deep within the number {%= (mult mysterious-primes) %}.

$ boot art --bindings "'{mysterious-primes [7 191]}" \
           --delimiters "'{:begin-forms \"{%\" :end-forms \"%}\" :begin-eval \"{%=\" :end-eval \"%}\"}" \
           --files oracle.art
```

Discussion:
Command-line arguments presented by Boot to the `boot-art` task are interpreted as code.
You can prevent evaluation of undefined symbols by quoting them with a single quote `'`, for example as above.


#### `build.boot`: Specifying ART template files and/or the output directory
```clojure
(import '(java.io File))

(deftask render-art []
         (art :files #{"source/index.html.art" "templates"}
              :output-dir (File. "out")))
```
Discussion:
If `:files` is specified, `art` will use those files instead of searching Boot's fileset.
Providing an `:output-dir` will cause templates to be written there as well as to Boot's `(target)` (if any).


#### `build.boot`: Re-render templates whenever their source files change
```clojure
(set-env! :resource-paths #{"templates"})

(deftask dev []
         (comp (watch)
               (art)
               (target)))
```

#### Standalone `boot` CLI usage

```
  $ boot -d vivid/boot-art art [OPTIONS]
```



## License

Â© Copyright Vivid Inc.
[Apache License 2.0](LICENSE.txt) licensed.
