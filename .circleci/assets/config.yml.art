# CircleCI configuration file
#
# Referencing https://circleci.com/docs/2.0/language-clojure/

version: 2.1
<%
(def clojure-versions (get vivid-art-facts 'clojure-versions))
(def java-versions    (get vivid-art-facts 'java-versions))

(def clojure-versions-str
  (->> (map #(str "\"" % "\"") clojure-versions)
       (clojure.string/join " ")))

%>
#
# Individual job definitions
#

ash-ra-template-job: &ash-ra-template-job
  environment:
    LEIN_ROOT: "true"
    # Customize the JVM maximum heap limit
    JVM_OPTS: -Xmx3200m

  # Build art and art-cli in one go, for expediency.
  steps:
    - checkout
    - restore_cache:
        keys:
          - m2-deps-{{ checksum "art/project.clj" }}-{{ checksum "art-cli/project.clj" }}
          # Fallback
          - m2-deps-
    - run:
        command: lein test
        working_directory: art
    - store_test_results:
        path: art/cloverage/junit.xml
    - run:
        command: lein test
        working_directory: art-cli
    - store_test_results:
        path: art-cli/cloverage/junit.xml
    - save_cache:
        key: m2-deps-{{ checksum "art/project.clj" }}-{{ checksum "art-cli/project.clj" }}
        paths:
          - ~/.m2
    - run:
        name: Upload code coverage report to codecov.io
        command: |
          if curl --silent --fail https://codecov.io/bash > codecov.sh ; then
            bash < codecov.sh
          else
            echo skipping codecov.io: script download error
          fi
        working_directory: art
    - run:
        name: Upload code coverage report to codecov.io
        command: |
          if curl --silent --fail https://codecov.io/bash > codecov.sh ; then
            bash < codecov.sh
          else
            echo skipping codecov.io: script download error
          fi
        working_directory: art-cli
    # The downstream builds require the ART jar file installed in the local ~/.m2 directory
    - persist_to_workspace:
        root: ~/.m2
        paths:
          - .

clj-art: &clj-art-job
  steps:
    - checkout
    - attach_workspace:
        at: ~/.m2
    - run:
        # Installing Clojure provides the `clojure` command
        # Referencing https://clojure.org/guides/getting_started#_installation_on_linux
        name: Install rlwrap
        command: |
          sudo apt update
          sudo DEBIAN_FRONTEND=noninteractive apt install -yq rlwrap
    - run:
        command: |
          for ver in <%= clojure-versions-str %>
          do
            # TODO return value is non-zero, but build passes?
            clojure -M:clojure-${ver}:test
          done
        working_directory: clj-art
    - store_test_results:
        path: clj-art/target/junit.xml

lein-art: &lein-art-job
  environment:
    LEIN_ROOT: "true"
    LEIN_USE_BOOTCLASSPATH: no
  steps:
    - checkout
    - attach_workspace:
        at: ~/.m2
    - run:
        command: lein test
        working_directory: lein-art
    # TODO - store_test_results:
    #    path: lein-art/.../junit.xml


# Referencing https://hub.docker.com/r/cimg/clojure/tags
jobs:<% (doseq [v java-versions]
     (let [cimg (format "cimg/clojure:%s-openjdk-%s.0" (last clojure-versions) v)] %>
  ash-ra-template-jdk-<%= v %>-job:
    <<: *ash-ra-template-job
    docker:
      - image: <%= cimg %>
  clj-art-jdk-<%= v %>-job:
    <<: *clj-art-job
    docker:
      - image: <%= cimg %>
  lein-art-jdk-<%= v %>-job:
    <<: *lein-art-job
    docker:
      - image: <%= cimg %><% ))%>

workflows:
  version: 2
  assess-quality:
    jobs:<% (doseq [v java-versions] %>
      - ash-ra-template-jdk-<%= v %>-job
      - clj-art-jdk-<%= v %>-job:
          requires:
            - ash-ra-template-jdk-<%= v %>-job
      - lein-art-jdk-<%= v %>-job:
          requires:
            - ash-ra-template-jdk-<%= v %>-job<% ) %>
