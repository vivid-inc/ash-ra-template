# clj-art Ash Ra Template Clojure Tool 

{%
(require 'clojure.string)
(require 'vivid.art)

(def to-phase-values (->> vivid.art/render-phases
                          (map #(format "`%s`" (name %)))
                          (clojure.string/join ", ")))
%}

[![License](https://img.shields.io/badge/license-Apache%202-blue.svg?style=flat-square)](LICENSE.txt)
[![Current version](https://img.shields.io/clojars/v/vivid/clj-art.svg?color=blue&style=flat-square)](https://clojars.org/vivid/clj-art)

`clj-art` is a Clojure `deps.edn` tool for rendering [Ash Ra Template](https://github.com/vivid-inc/ash-ra-template) `.art` templates.



## Quick Start
{% ; Quick Start introduces a least-friction sample that intrigues the reader to try it out themselves. %}

Templates are supplied as one or more paths to `.art` template files and/or
directory trees thereof.
The `art` Boot task scans those paths for all ART template files with the `.art`
filename extension.
Templates are rendered and written under the output directory `:output-dir`
preserving sub-paths, stripped of the `.art` extension.

```sh
$ cat oracle.art

<% (defn mult [multiplicands] (apply * multiplicands)) %>
Wait, I see it! Your destiny lies deep within the number <%= (mult mysterious-primes) %>.

$ cat deps.edn

{:aliases
  {:art {:extra-deps {vivid/clj-art {:mvn/version "{%=vivid-art-version%}"}}
         :main-opts  ["-m" "vivid.art.clj-tool"]}}}

$ clojure -A:art --bindings "{mysterious-primes [7 191]}" \
                 oracle.art
```
`clj-art` will render the output file `oracle` into the current directory.

You can also add the above alias to your personal `~/.clojure/deps.edn`.
You'll then be able to render ART templates using `clj-art` at the CLI anywhere you desire.



## Options


| Keyword | CLI argument | Parameters | Default | Explanation |
| --- | --- | --- | --- | --- |
| `:bindings` | `--bindings` | VAL | | Bindings made available to templates for symbol resolution |
| `:delimiters` | `--delimiters` | VAL | `{%=vivid.art/default-delimiters-name%}` | Template delimiters |
| `:dependencies` | `--dependencies` | VAL | | Clojure deps map providing libs within the template evaluation environment. Deps maps are merged into this one. Supply your own Clojure dep to override the current version. |
| | `-h`, `--help` | | | Displays lovely help and then exits |
| `:output-dir` | `--output-dir` | DIR | `.` | Write rendered files to DIR |
| `:to-phase` | `--to-phase` | One of: {%= to-phase-values %} | `{%=vivid.art/default-to-phase%}` | Stop the render dataflow on each template at an earlier phase |

A rendering batch can also be specified as an alias in `deps.edn'.
Options are supplied identically to the CLI invocation. Run the ART alias with:



## Cookbook

`art/test-resources` contains sample Clojure Tool projects that parallel the automated test suite.


#### Use space characters in arguments within `deps.edn`

When supplying double-quoted parameters to options in your `deps.edn` file, spaces must be replaced with comma ',' characters.
Example:
```edn
  "--dependencies" "{vivid/art {:mvn/version \"{%=vivid-art-version%}\"}}"    ; Bad, will fail

  "--dependencies" "{vivid/art,{:mvn/version,\"{%=vivid-art-version%}\"}}"    ; OK
```
This mangling is idiosyncratic to `deps.edn`.
`clj-art` invoked at the command line obediently accepts the plain form:
```
$ clojure -m vivid.art.clj-tool \
    --dependencies "{vivid/art {:mvn/version \"{%=vivid-art-version%}\"}}"    ; OK
    ...
```

#### Use `clj-art` globally

Add the following to your `~/.clojure/deps.edn` file:
```edn
{:aliases {:art {:extra-deps {vivid/clj-art {:mvn/version "{%=vivid-art-version%}"}}}}}
```
And use it like this:
```bash
$ clojure -A:art [OPTIONS] [TEMPLATE-PATHS]
```



TODO List at https://github.com/clojure/tools.deps.alpha/wiki/Tools


## License

Â© Copyright Vivid Inc.
[Apache License 2.0](LICENSE.txt) licensed.
