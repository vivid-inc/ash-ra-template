# clj-art Ash Ra Template Clojure Tool 

{%
(require '[clojure.string]
         '[vivid.art]
         '[vivid.art.clj-tool])

(def to-phase-values (->> vivid.art/render-phases
                          (map #(format "`%s`" (name %)))
                          (clojure.string/join ", ")))
%}

<style type="text/css>
.warning {
  background-color: lightyellow;
  border: 2px solid yellow;
  color: #222;
  padding: 0.25em 1em;
}
</style>

[![License](https://img.shields.io/badge/license-Apache%202-blue.svg?style=flat-square)](LICENSE.txt)
[![Current version](https://img.shields.io/clojars/v/vivid/clj-art.svg?color=blue&style=flat-square)](https://clojars.org/vivid/clj-art)

`clj-art` is a Clojure `deps.edn` tool for rendering [Ash Ra Template](https://github.com/vivid-inc/ash-ra-template) `.art` templates.



## Quick Start
{% ; Quick Start introduces a least-friction sample that intrigues the reader to try it out themselves. %}

```sh
$ cat oracle.art

<% (defn mult [multiplicands] (apply * multiplicands)) %>
Wait, I see it! Your destiny lies deep within the number <%= (mult mysterious-primes) %>.

$ cat deps.edn

{:aliases
  {:art {:extra-deps {vivid/clj-art {:mvn/version "{%= vivid-art-version %}"}}
         :main-opts  ["-m" "vivid.art.clj-tool"]}}}

$ clojure -A:art --bindings "{mysterious-primes [7 191]}" \
                 oracle.art
```
`clj-art` will render the output file `oracle` into the current directory.

You can also add the above alias to your personal `~/.clojure/deps.edn`.
You'll then be able to render ART templates using `clojure` at the CLI anywhere you desire.
```sh
$ clojure -A:art --help
```



## Synopsis

`clj-art` is usable with `deps.edn`.

Templates are supplied as one or more paths to `.art` template files and/or
directory trees thereof.
The `art` Boot task scans those paths for all ART template files with the `.art`
filename extension.

Templates are rendered and written under `output-dir` stripped of their `.art`
filename extensions, overwriting any existing files with the same paths.
`output-dir` and sub-paths therein are created as necessary.



#### Options

| Argument | Parameters | Default | Explanation |
| --- | --- | --- | --- |
| `--bindings` | VAL | | Bindings made available to templates for symbol resolution. Limited to a single usage. |
| `--delimiters` | VAL | `{%= vivid.art/default-delimiters-name %}` | Template delimiters |
| `--dependencies` | VAL | | Clojure deps map providing libs within the template evaluation environment. Deps maps are merged into this one. Supply your own Clojure dep to override the current version. |
| `-h`, `--help` | | | Displays lovely help and then exits |
| `--output-dir` | DIR | `{%= (:output-dir vivid.art.clj-tool/default-options) %}` | Write rendered files to DIR |
| `--to-phase` | One of: {%= to-phase-values %} | `{%= (name vivid.art/default-to-phase) %}` | Stop the render dataflow on each template at an earlier phase |

Depending on what types of values a particular option accepts,
ART attempts to interpret argument values in this order of precedence:
1. As a map.
1. As the (un-)qualified name of a var.
1. As a path to an EDN file.
1. As an EDN literal.



## Cookbook

{% ; ../examples/ contains sample projects that parallel these recipes, and are included in the automated test suite.
   ; Each cookbook recipe should link to its corresponding ../examples/ directory.
%}



#### Override bundled Clojure version
As an implicit dependency, the template execution environment provides ART's minimum supported version of Clojure, version {%= (first clojure-versions) %}, but this can be overridden by supplying the `org.clojure/clojure` dependency with a different version:
```edn
{:aliases
  {:art {:extra-deps {vivid/clj-art {:mvn/version "{%= vivid-art-version %}"}}
         :main-opts  ["-m" "vivid.art.clj-tool" "templates"
                      "--dependencies" "{org.clojure/clojure,{:mvn/version,\"{%= (last clojure-versions) %}\"}}"]}}}
```
See also:
[Example](../examples/override-clojure-version).
[`:dependencies` option](../art/README.md#external-dependencies) in the ART documentation.



#### Custom bindings, delimiters, and dependencies, and project code
<div class="warning">
<p>NOTE: THIS deps.edn EXAMPLE CURRENTLY FAILS</p>
<p><code>--bindings</code> cannot be used more than once. This is due to
<code>org.clojure/tools.cli</code> 1.0.194 processing multiple issuances of a given CLI option
by overwriting its previous value; only the last issuance survives as the
option's value. The next newer version of <code>tools.cli</code> features a new <code>:multi</code>
setting on the option spec.</p>
</div>
Template syntax is set by the `:delimiters` options.
Clojure forms within the templates can resolve vars and dependencies provided
by several factors: `:bindings` for resolving vars, `:dependencies` for
libraries, and code in the project.
This is all set as follows:
```edn
{:aliases
 {:art {:extra-deps {vivid/clj-art {:mvn/version "0.5.0"}}
        :main-opts  ["-m" "vivid.art.clj-tool"

                     ; Render all .art templates in the content/ directory
                     "content"

                     ; Map as a string
                     "--bindings" "{manufacturer,\"Acme,Corporation\",manufacture-year,\"2022\"}"
                     ; Var whose value is a map
                     "--bindings" "com.acme.data/product-data"
                     ; EDN as a string
                     "--bindings" "{current-year,2021}"
                     ; EDN file; top-level form is a map
                     "--bindings" "data/sales-offices.edn"

                     ; Unqualified, resolves to #'vivid.art.delimiters/jinja
                     "--delimiters" "jinja"

                     "--dependencies" "{hiccup,{:mvn/version,\"1.0.5\"}}"
                     "--to-phase" "enscript"
                     ; Render to the our/cdn/ directory
                     "--output-dir" "out/cdn"]}}}
```
See also:
[Example](../examples/custom-options).
[Rendering and options](../art/README.md#rendering-and-options) in the ART documentation.







#### You can specify several ART rendering batches in `deps.edn', each with a unique alias.

#### Use space characters in arguments within `deps.edn`

When supplying double-quoted parameters to options in your `deps.edn` file, spaces must be replaced with comma ',' characters.
Example:
```edn
  "--dependencies" "{vivid/art {:mvn/version \"{%=vivid-art-version%}\"}}"    ; Bad, will fail

  "--dependencies" "{vivid/art,{:mvn/version,\"{%=vivid-art-version%}\"}}"    ; OK
```
This mangling is idiosyncratic to `deps.edn`.
`clj-art` invoked at the command line obediently accepts the plain form:
```
$ clojure -m vivid.art.clj-tool \
    --dependencies "{vivid/art {:mvn/version \"{%=vivid-art-version%}\"}}"    ; OK
    ...
```



## License

Â© Copyright Vivid Inc.
[Apache License 2.0](LICENSE.txt) licensed.
