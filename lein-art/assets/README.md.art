# lein-art Ash Ra Template Leiningen Plugin 

{%
(require '[clojure.string]
         '[vivid.art])

(def to-phase-values (->> vivid.art/render-phases
                          (map #(format "`%s`" (name %)))
                          (clojure.string/join ", ")))
%}

<style type="text/css>
.warning {
  background-color: lightyellow;
  border: 2px solid yellow;
  color: #222;
  padding: 0.25em 1em;
}
</style>

[![License](https://img.shields.io/badge/license-Apache%202-blue.svg?style=flat-square)](LICENSE.txt)
[![Current version](https://img.shields.io/clojars/v/vivid/lein-art.svg?color=blue&style=flat-square)](https://clojars.org/vivid/lein-art)

`lein-art` is a Leiningen plugin for rendering [Ash Ra Template](https://github.com/vivid-inc/ash-ra-template) `.art` templates.



## Quick Start
{% ; Quick Start introduces a least-friction sample that intrigues the reader to try it out themselves. %}

```sh
$ cat oracle.art

<% (defn mult [multiplicands] (apply * multiplicands)) %>
Wait, I see it! Your destiny lies deep within the number <%= (mult mysterious-primes) %>.

$ cat project.clj

(defproject rndr "1.2.3"
  :plugins [[vivid/lein-art "{%=vivid-art-version%}"]]
  :art {:bindings   "{mysterious-primes [7 191]}"
        :templates  "oracle.art"
        :output-dir "."})

$ lein art
```
`lein-art` will render the output file `oracle` into the current directory.

You can also add `lein-art` to your `~/.lein/profiles.clj`
```clojure
{:user {:plugins [[vivid/lein-art "{%=vivid-art-version%}"]]}}
```
You'll then be able to render ART templates using `lein` at the CLI anywhere you desire.
```sh
$ lein art --help
```



## Synopsis

`lein-art` can be used with Leiningen `project.clj` and at the CLI.

Templates are supplied as one or more paths to `.art` template files and/or
directory trees thereof.
The `art` Boot task scans those paths for all ART template files with the `.art`
filename extension.

Templates are rendered and written under `output-dir` stripped of their `.art`
filename extensions, overwriting any existing files with the same paths.
`output-dir` and sub-paths therein are created as necessary.



#### Options

| `project.clj` | CLI argument | Parameters | Default | Explanation |
| --- | --- | --- | --- | --- |
| `:bindings` | `--bindings` | VAL | | Bindings made available to templates for symbol resolution |
| `:delimiters` | `--delimiters` | VAL | `{%= vivid.art/default-delimiters-name %}` | Template delimiters |
| `:dependencies` | `--dependencies` | VAL | | Clojure deps map providing libs within the template evaluation environment. Deps maps are merged into this one. Supply your own Clojure dep to override the current version. |
| | `-h`, `--help` | | | Displays lovely help and then exits |
| `:output-dir` | `--output-dir` | DIR | `.` | Write rendered files to DIR |
| `:templates` | [FILES] | VAL | | Paths to ART template files |
| `:to-phase` | `--to-phase` | One of: {%= to-phase-values %} | `{%= (name vivid.art/default-to-phase) %}` | Stop the render dataflow on each template at an earlier phase |

Depending on what types of values a particular option accepts and whether `lein-art` was invoked as a Leiningen configuration or from the CLI,
ART attempts to interpret argument values in this order of precedence:
1. As a map.
1. As the (un-)qualified name of a var.
1. As a path to an EDN file.
1. As an EDN literal.



## Cookbook

{% ; ../examples/ contains sample projects that parallel these recipes, and are included in the automated test suite.
   ; Each cookbook recipe should link to its corresponding ../examples/ directory.
%}



#### Override bundled Clojure version
As an implicit dependency, the template execution environment provides ART's minimum supported version of Clojure, version {%= (first clojure-versions) %}, but this can be overridden by supplying the `org.clojure/clojure` dependency with a different version:
```clojure
  :art {:templates    "templates"
        :dependencies {org.clojure/clojure {:mvn/version "{%= (last clojure-versions) %}"}}}
```
See also:
[Example](../examples/override-clojure-version).
[`:dependencies` option](../art/README.md#external-dependencies) in the ART documentation.



#### Custom bindings, delimiters, and dependencies, and project code
<div class="warning">
<p>NOTE: THIS deps.edn EXAMPLE IS INCOMPLETE</p>
<p>The authors so far don't know how to specify a Var that is defined within src/ as in:
<pre>
  :bindings   #'com.acme.data/widget                 ; Var, value is a map
</pre>
For the sake of completeness, its value is copy & pasted into the example below in place of the var.
</div>
Template syntax is set by the `:delimiters` options.
Clojure forms within the templates can resolve vars and dependencies provided
by several factors: `:bindings` for resolving vars, `:dependencies` for
libraries, and code in the project.
This is all set as follows:
```clojure
; Render all .art template files in the content/ directory to out/cdn/
(defproject example-custom-options "0"

  :plugins [[vivid/lein-art "0.5.0"]]

  ; Render all .art template files in the content/ directory to out/cdn/
  :art {:templates    "content"

        :bindings     [{manufacturer     "Acme Corporation"    ; Map literal
                        manufacture-year "2022"}

                       ; (See note above)
                       ;#'com.acme.data/widget                 ; Var, value is a map
                       {products [{:name               "Bag of bird seed"
                                    :weight-kgs         1.0
                                    :minimum-order-qty  50
                                    :unit-price-dollars 0.39M}
                                   {:name               "Ironing board on rollerskates"
                                    :weight-kgs         2.0
                                    :minimum-order-qty  10
                                    :unit-price-dollars 17.95M}]}

                       "{current-year 2021}"                   ; EDN as a string
                       "data/sales-offices.edn"]               ; EDN file; top-level form is a map

        :delimiters   "jinja"                                  ; Resolves to #'vivid.art.delimiters/jinja

        :dependencies {hiccup {:mvn/version "1.0.5"}
                       ; Give templates use of project code.
                       example-custom-options {:mvn/version "LATEST"
                                               :local/root "."}}

        :output-dir   "out/cdn"})
```
Install the project code as a Jar into your local `.m2` repository and then
render the ART templates, perhaps as a Leiningen alias:
```sh
$ lein do clean, install, art
...
Rendering ART catalog/index.html
$ diff -r expected/ out/cdn/
```

See also:
[Example](../examples/custom-all).
[Rendering and options](../art/README.md#rendering-and-options) in the ART documentation.



#### Watch .art templates, re-rendering on change
There are several Leiningen plugins that can be used to monitor files and react to changes.
In this example, we use WeaveJester's (`lein-auto`)[https://github.com/weavejester/lein-auto].
```clojure
(defproject art-example--watch "0"

  :aliases {"watch" ["auto" "art"]}

  ; ART template batch configuration
  :art {:templates    "resources"
        :output-dir   "target"}

  ; lein-auto configuration
  :auto {:default {:file-pattern #"\.(art)$"    ; Monitor .art files for changes ..
                   :paths ["resources"]}}       ; .. in the resources/ directory

  :plugins [[vivid/lein-art "0.5.0"]    ; Render ART templates with lein-art
            [lein-auto "0.1.3"]])       ; Monitor files for changes, run a command on change
```
See also:
[Example](../examples/watch).



#### Multiple render batches
One or more rendering batches can also be specified as a section in `project.clj':

```clojure
:art [{...}    ; One render configuration batch
      {...}    ; A different batch
      ]
```

Run all batches with:
```sh
$ lein art
```





## License

Â© Copyright Vivid Inc.
[Apache License 2.0](LICENSE.txt) licensed.
